spring.application.name=kannel-service
server.port=8078

#spring.kafka.bootstrap-servers= localhost:9092
#spring.kafka.consumer.group-id=send-sms-to-kannel-consumer-123
#spring.kafka.consumer.auto-offset-reset=earliest
#
#spring.kafka.producer.retries=3
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.admin.auto-create=true

# --- Kafka Broker ---
spring.kafka.bootstrap-servers=localhost:9092

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.add.type.headers=false
spring.kafka.producer.retries=3

spring.kafka.consumer.group-id=send-sms-to-kannel-consumer-123testyyijjkkkkl
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.value.default.type=com.gk.kannel.model.MessageRequest
spring.kafka.consumer.properties.spring.json.trusted.packages=com.gk.kannel.model
spring.kafka.consumer.auto-offset-reset=earliest

sms.requests.topic=gk.sms.requests
failed.sms.requests.topic=gk.failed.sms.requests

#kannel.base.url= cgi-bin/sendsms
kannel.base.url=https://webhook.site/93c35b2b-4126-486c-a05f-5012618cc347
kannel.username=playsms
kannel.password=sendpwdnotreal
is.test=true

spring.datasource.url=jdbc:mysql://localhost:3306/message_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=rootpassword
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true
#spring.sql.init.mode=always

# HikariCP Settings
spring.datasource.hikari.pool-name=smsHikariPool
spring.datasource.hikari.maximum-pool-size=100      # Increase based on your DB capacity
spring.datasource.hikari.minimum-idle=30            # Keeps idle connections ready
spring.datasource.hikari.idle-timeout=30000         # 30 seconds
spring.datasource.hikari.connection-timeout=30000   # 30 seconds max wait to get a connection
spring.datasource.hikari.max-lifetime=1800000       # 30 minutes before recycling a connection
spring.datasource.hikari.validation-timeout=5000    # Timeout for connection validation
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.auto-commit=true

# Optional - Leak Detection (debug only)
# spring.datasource.hikari.leak-detection-threshold=2000